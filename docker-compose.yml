# Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)

version: '3.8'

# Define services
services:
  # Annuaire Eureka
  odoru-annuaire:
    build:
      context: Odoru-Annuaire # Répertoire (dans répertoire courant) contenant le dockerfile
      dockerfile: Dockerfile
    image: odoru-annuaire:0.0.1 # Pour placer le TAG de version sur le nom de l'image
    ports:
      - "1111:1111" # Exposition port 1111 du conteneur Annuaire vers 1111 de l'hôte.
    restart: always 
    container_name: odoru_annuaire
    networks:
      - backend
  
  # Serveur de configuration
  odoru-configserver:
    build:
      context: Odoru-ConfigServer
      dockerfile: Dockerfile
    image: Odoru-ConfigServer:0.0.1
    restart: "no" 
    depends_on: 
      - odoru-annuaire
    container_name: odoru_configserver
    networks: 
      - backend
    environment:
      WAIT_HOSTS: odoru_annuaire:1111 # Attente demarrage service Annuaire (attente 30s MAX)
  
  # Micro-service API Gateway
  odoru-apigateway:
    build:
      context: Odoru-ApiGateway
      dockerfile: Dockerfile
    image: Odoru-APIGatway:0.0.1
    ports:
      - "1006:1006" # Exposition port 1006 API Gateway
    restart: "no" 
    container_name: odoru_apigateway
    depends_on: 
      - odoru-configserver
      - odoru-badgeservice
      - odoru-coursservice
      - odoru-competitionservice
      - odoru-utilisateurservice
      - odoru-statistiqueservice
      - odoru-courscompositeservice
      - odoru-competitioncompositeservice
    networks: 
      - backend
    environment:
    # TODO : Modifier le nom des containers
      WAIT_HOSTS: odoru_configserver:2222, bnkmongo:27017, bnkcompteservice:10021, bnkclientservice:10011, bnkclientservice:10031  # Attente demarrage services (attente 30s MAX)

    # Micro-service Utilisateur
    odoru-utilisateurservice:



  #################
  #   SERVICES    #
  #################






  # ZipKin
  zipkin:
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    restart: "no"
    container_name: odoru_zipkin
    networks:
      - backend
  
  # Prometheus
  prometheus:
    # Lancement service Prometheus
    image: prom/prometheus
    ports:
      - "9090:9090"
    restart: "no" 
    container_name: odoru_prometheus
    depends_on: 
      - odoru-annuaire
    networks: 
      - backend

  #################
  #   DATABASE    #
  #################

  # Database ServiceUtilisateur (Mysql)
  mysql_utilisateur:
    image: mysql:latest
    ports:
      - "3308:3306"
    restart: always
    container_name: odoru_mysql_utilisateur
    environment:
      MYSQL_DATABASE: utilisateur
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: user
      MYSQL_PASSWORD: pass
    networks:
      - backutilisateur

  # Database ServiceBadge (Mysql)
  mysql_badge:
    image: mysql:latest
    ports:
      - "3309:3306"
    restart: always
    container_name: odoru_mysql_badge
    environment:
      MYSQL_DATABASE: badge
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: user
      MYSQL_PASSWORD: pass
    networks:
      - backbadge

  # Database ServiceCours (Mongo)
  mongo_cours:
    image: mongo
    ports:
      - "27017:27017" # host is first, container is second.
    restart: always
    container_name: odoru_mongo_cours
    #volumes:
    #  - db-data-mongo:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
      MONGO_INITDB_DATABASE: odoru_mongo_cours
    networks:
      - backcours

  # Database ServiceCompetition (Mongo)
  mongo_competition:
    image: mongo
    ports:
      - "27018:27017" # host is first, container is second.
    restart: always
    container_name: odoru_mongo_competition
    #volumes:
    #  - db-data-mongo:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
      MONGO_INITDB_DATABASE: odoru_mongo_competition
    networks:
      - backcompetitions

# Networks to be created to facilitate communication between containers
networks:
  backend:
  backutilisateur:
  backcours:
  backcompetitions:
  backbadge:
